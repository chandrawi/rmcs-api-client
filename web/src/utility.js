/**
 * Convert base64 string to UUID hex representation
 * @param {string} str 
 * @returns {string}
 */
export function base64_to_uuid_hex(str) {
    const raw = atob(str);
    let result = '';
    let dashPos = [3, 5, 7, 9];
    for (let i = 0; i < raw.length; i++) {
      const hex = raw.charCodeAt(i).toString(16);
      result += (hex.length === 2 ? hex : '0' + hex);
      if (dashPos.includes(i)) {
        result += '-'
      }
    }
    return result.toUpperCase();
}

/**
 * Convert UUID hex representation to base64 string
 * @param {string} uuid 
 * @returns {string}
 */
export function uuid_hex_to_base64(uuid) {
    if (typeof uuid == "string") {
        uuid = uuid.replace(/-/g, '')
        if (/^[0-9a-fA-F]{32}$/.test(uuid)) {
            return btoa(uuid.match(/\w{2}/g).map((a) => {
                return String.fromCharCode(parseInt(a, 16));
            }).join(""));
        }
    }
    return ""
}

/**
 * Generate random bytes
 * @param {number} number number of generated bytes (integer) 
 */
export function random_binary(number) {
    const buffer = new Uint8Array(number)
    buffer.forEach((value, index, array) => {
        array[index] = Math.floor(Math.random() * 256)
    })
    return buffer
}

/**
 * Generate random base64 string
 * @param {number} number number of generated base64 string (integer) 
 * @returns {string}
 */
export function random_base64(number) {
    const base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    let str = ""
    for (let i=0; i<number; i++) {
        str += base64.charAt(Math.floor(Math.random() * 64))
    }
    return str
}

/**
 * Convert a string into an ArrayBuffer
 * @param {string} str 
 * @returns {ArrayBuffer}
 */
export function string_to_array_buffer(str) {
    const buf = new ArrayBuffer(str.length);
    const bufView = new Uint8Array(buf);
    for (let i = 0, strLen = str.length; i < strLen; i++) {
        bufView[i] = str.charCodeAt(i);
    }
    return buf;
}
